{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "domainNamePrefix": {
            "type": "string",
            "metadata": {
                "description": "The public DNS name label for the service.  The pattern will follow: <domainNamePrefix>.<region>.cloudapp.azure.com"
            }
        },
        "vmSku": {
            "type": "string",
            "defaultValue": "Standard_A3",
            "metadata": {
                "description": "VM size for the VM Scale Set + the mgmt VM"
            }
        },
        "windowsOSVersion": {
            "type": "string",
            "defaultValue": "2012-R2-Datacenter",
            "metadata": {
                "description": "The Windows Server version for the VM. This will pick a fully patched image of this given Windows version"
            }
        },
        "vmssName": {
            "type": "string",
            "metadata": {
                "description": "String used as a base for naming resources (9 characters or less). A hash is prepended to this string for some resources, and resource-specific information is appended."
            },
            "maxLength": 9
        },
        "instanceCount": {
            "type": "int",
            "defaultValue": 5,
            "metadata": {
                "description": "Number of VM instances (100 or less)."
            },
            "maxValue": 100
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "Admin username on all VMs."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Admin password on all VMs."
            }
        }
    },
    "variables": {
        "computeApi": "2016-03-30",
        "networkApi": "2016-03-30",
        "storageApi": "2015-06-15",
        "insightsApi": "2015-04-01",
        "storageAccountType": "Standard_LRS",
        "saCount": 5,
        "namingInfix": "[toLower(parameters('vmssName'))]",
		"namingInfix1": "[toLower(concat(parameters('vmssName'), '1'))]",
        "newStorageAccountSuffix": "[concat(variables('namingInfix'), 'sa')]",
        "uniqueStringArray": [
            "[concat(uniqueString(concat(resourceGroup().id, deployment().name, variables('newStorageAccountSuffix'), '0')))]",
            "[concat(uniqueString(concat(resourceGroup().id, deployment().name, variables('newStorageAccountSuffix'), '1')))]",
            "[concat(uniqueString(concat(resourceGroup().id, deployment().name, variables('newStorageAccountSuffix'), '2')))]",
            "[concat(uniqueString(concat(resourceGroup().id, deployment().name, variables('newStorageAccountSuffix'), '3')))]",
            "[concat(uniqueString(concat(resourceGroup().id, deployment().name, variables('newStorageAccountSuffix'), '4')))]"
        ],
        "vhdContainerName": "[concat(variables('namingInfix'), 'vhd')]",
        "osDiskName": "[concat(variables('namingInfix'), 'osdisk')]",
        "virtualNetworkName": "[concat(variables('namingInfix'), 'vnet')]",
        "virtualNetworkID": "[resourceId('Microsoft.Network/virtualNetworks/',variables('virtualNetworkName'))]",
        "addressPrefix": "192.168.0.0/16",
        "subnetName": "[concat(variables('namingInfix'), 'subnet')]",
        "subnetID": "[concat(variables('virtualNetworkID'),'/subnets/',variables('subnetName'))]",
        "subnetPrefix": "192.168.0.0/24",
        "publicIPAddressName": "[concat(variables('namingInfix'), 'pip')]",
        "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses/',variables('publicIPAddressName'))]",
        "loadBalancerName": "[concat(variables('namingInfix'), 'loadBalancer')]",
        "loadBalancerID": "[resourceId('Microsoft.Network/loadBalancers/',variables('loadBalancerName'))]",
        "frontendIPConfigurationsName": "[concat(variables('loadBalancerName'), 'frontendIPConfigurations')]",
        "frontEndIPConfigurationsID": "[concat(variables('loadBalancerID'),'/frontendIPConfigurations/',variables('frontendIPConfigurationsName'))]",
        "loadBalancingRulesName": "[concat(variables('loadBalancerName'), 'loadBalancingRules')]",
        "backendAddressPoolsName":"[concat(variables('loadBalancerName'), 'backendAddressPools')]",
        "backendAddressPoolID": "[concat(variables('loadBalancerID'),'/backendAddressPools/',variables('backendAddressPoolsName'))]",
        "httpProbeName": "[concat(variables('loadBalancerName'),'httpProbe')]",
        "httpProbeID": "[concat(variables('loadBalancerID'),'/probes/',variables('httpProbeName'))]",
        "httpProbeRequestPath": "/iisstart.htm",
        "natRDPPoolName": "[concat(variables('loadBalancerName'), 'natRDP')]",
        "natRDPPoolID": "[concat(variables('loadBalancerID'),'/inboundNatPools/',variables('natRDPPoolName'))]",
        "natRDPStartPort":50000,
        "natRDPEndPort":50119,
        "natRDPBackendPort":3389,
        "natWinRMPoolName": "[concat(variables('loadBalancerName'), 'natWinRM')]",
        "natWinRMPoolID": "[concat(variables('loadBalancerID'),'/inboundNatPools/',variables('natWinRMPoolName'))]",
        "natWinRMStartPort":51000,
        "natWinRMEndPort":51119,
        "natWinRMBackendPort":5896,
        "nicName": "[concat(variables('namingInfix'), 'nic')]",
        "ipConfigName": "[concat(variables('namingInfix'), 'ipconfig')]",
        "osType": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "[parameters('windowsOSVersion')]",
            "version": "latest"
        },
        "imageReference": "[variables('osType')]"        
    },
    "resources": [
        {
        "type": "Microsoft.Storage/storageAccounts",
        "name": "[concat(variables('uniqueStringArray')[copyIndex()], variables('newStorageAccountSuffix'))]",
        "location": "[resourceGroup().location]",
        "apiVersion": "[variables('storageApi')]",
        "copy": {
          "name": "storageLoop",
          "count": "[variables('saCount')]"
        },
        "properties": {
          "accountType": "[variables('storageAccountType')]"
        }
      },
      {
        "type": "Microsoft.Network/virtualNetworks",
        "name": "[variables('virtualNetworkName')]",
        "location": "[resourceGroup().location]",
        "apiVersion": "[variables('networkApi')]",
        "properties": {
          "addressSpace": {
            "addressPrefixes": [
              "[variables('addressPrefix')]"
            ]
          },
          "subnets": [
            {
              "name": "[variables('subnetName')]",
              "properties": {
                "addressPrefix": "[variables('subnetPrefix')]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[variables('publicIPAddressName')]",
        "location": "[resourceGroup().location]",
        "apiVersion": "[variables('networkApi')]",
        "properties": {
          "publicIPAllocationMethod": "Dynamic",
          "dnsSettings": {
            "domainNameLabel": "[parameters('domainNamePrefix')]"
          }
        }
      },
      {
        "type": "Microsoft.Network/loadBalancers",
        "name": "[variables('loadBalancerName')]",
        "location": "[resourceGroup().location]",
        "apiVersion": "[variables('networkApi')]",
        "dependsOn": [
          "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]"
        ],
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "[variables('frontendIPConfigurationsName')]",
              "properties": {
                "publicIPAddress": {
                  "id": "[variables('publicIPAddressID')]"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "[variables('backendAddressPoolsName')]"
            }
          ],
          "loadBalancingRules": [
            {
              "name": "[variables('loadBalancingRulesName')]",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "[variables('frontEndIPConfigurationsID')]"
                },
                "backendAddressPool": {
                  "id": "[variables('backendAddressPoolID')]"
                },
                "protocol": "tcp",
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": false,
                "idleTimeoutInMinutes": 5,
                "probe": {
                  "id": "[variables('httpProbeID')]"
                }
              }
            }
          ],
          "probes": [
            {
              "name": "[variables('httpProbeName')]",
              "properties": {
                "protocol": "http",
                "port": 80,
                "intervalInSeconds": 5,
                "numberOfProbes": 2,
                "requestPath": "[variables('httpProbeRequestPath')]"
              }
            }
          ],
          "inboundNatPools": [
            {
              "name": "[variables('natRDPPoolName')]",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "[variables('frontEndIPConfigurationsID')]"
                },
                "protocol": "tcp",
                "frontendPortRangeStart": "[variables('natRDPStartPort')]",
                "frontendPortRangeEnd": "[variables('natRDPEndPort')]",
                "backendPort": "[variables('natRDPBackendPort')]"
              }
            },
            {
              "name": "[variables('natWinRMPoolName')]",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "[variables('frontEndIPConfigurationsID')]"
                },
                "protocol": "tcp",
                "frontendPortRangeStart": "[variables('natWinRMStartPort')]",
                "frontendPortRangeEnd": "[variables('natWinRMEndPort')]",
                "backendPort": "[variables('natWinRMBackendPort')]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachineScaleSets",
        "name": "[variables('namingInfix')]",
        "location": "[resourceGroup().location]",
        "apiVersion": "[variables('computeApi')]",
        "dependsOn": [
          "storageLoop",
          "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]",
          "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
        ],
        "sku": {
          "name": "[parameters('vmSku')]",
          "tier": "Standard",
          "capacity": "[parameters('instanceCount')]"
        },
        "properties": {
          "overprovision": "true",
          "upgradePolicy": {
            "mode": "Manual"
          },
          "virtualMachineProfile": {
            "storageProfile": {
              "osDisk": {
                "vhdContainers": [
                  "[concat('https://', variables('uniqueStringArray')[0], variables('newStorageAccountSuffix'), '.blob.core.windows.net/', variables('vhdContainerName'))]",
                  "[concat('https://', variables('uniqueStringArray')[1], variables('newStorageAccountSuffix'), '.blob.core.windows.net/', variables('vhdContainerName'))]",
                  "[concat('https://', variables('uniqueStringArray')[2], variables('newStorageAccountSuffix'), '.blob.core.windows.net/', variables('vhdContainerName'))]",
                  "[concat('https://', variables('uniqueStringArray')[3], variables('newStorageAccountSuffix'), '.blob.core.windows.net/', variables('vhdContainerName'))]",
                  "[concat('https://', variables('uniqueStringArray')[4], variables('newStorageAccountSuffix'), '.blob.core.windows.net/', variables('vhdContainerName'))]"
                ],
                "name": "[variables('osDiskName')]",
                "caching": "ReadOnly",
                "createOption": "FromImage"
              },
              "imageReference": "[variables('imageReference')]"
            },            
            "osProfile": {
              "computerNamePrefix": "[variables('namingInfix')]",
              "adminUsername": "[parameters('adminUsername')]",
              "adminPassword": "[parameters('adminPassword')]"
            },
            "networkProfile": {
              "networkInterfaceConfigurations": [
                {
                  "name": "[variables('nicName')]",
                  "properties": {
                    "primary": "true",
                    "ipConfigurations": [
                      {
                        "name": "[variables('ipConfigName')]",
                        "properties": {
                          "subnet": {
                            "id": "[variables('subnetID')]"
                          },
                          "loadBalancerBackendAddressPools": [
                            {
                              "id": "[variables('backendAddressPoolID')]"
                            }
                          ],
                          "loadBalancerInboundNatPools": [
                            {
                              "id": "[variables('natRDPPoolID')]"
                            },
                            {
                              "id": "[variables('natWinRMPoolID')]"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      }      
    ],
    "outputs": {
		"fqdn": {
			"value": "[reference(variables('publicIPAddressID'),providers('Microsoft.Network','publicIPAddresses').apiVersions[0]).dnsSettings.fqdn]",
			"type": "string"
		}
	}
}